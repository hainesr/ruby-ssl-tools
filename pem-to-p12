#!/usr/bin/env ruby
# Copyright (c) 2011 The University of Manchester, UK.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the names of The University of Manchester nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Robert Haines

require 'rubygems'
require 'openssl'
require 'optparse'
require 'io/console'

options = {}
opts = OptionParser.new do |opt|
  opt.banner = "Usage: pem-to-p12 [options] pem-file"
  opt.separator "  Convert the supplied pem file into p12 format where " \
    "[options] can be:"
  opt.on("-o FILENAME", "--out=FILENAME", "The file in which to store the " \
    "output. If this is not specified it will be written to the " \
    "terminal.") do |val|
    options[:out] = val.chomp
  end
  opt.on("-p PASSWORD", "--password=PASSWORD", "The export password for the " \
    "p12 file. If not specified it will be asked for.") do |val|
    options[:password] = val.chomp
  end
  opt.on_tail("-h", "-?", "--help", "Show this help message.") do
    puts opts
    exit
  end
  opt.on_tail("-v", "--version", "Show the version.") do
    puts "2.0"
    exit
  end
end

opts.parse!

infile = ARGV.shift
if infile.nil?
  $stderr.puts opts
  exit(1)
else
  data = File.read(infile.chomp)
end

password = options[:password]
if password.nil?
  p1 = $stdin.getpass("Enter Export Password:")
  p2 = $stdin.getpass("Verify Export Password:")

  if p1 == p2
    password = p1
  else
    $stderr.puts "Password mismatch"
    exit(1)
  end
end

cert = OpenSSL::X509::Certificate.new(data)
pkey = OpenSSL::PKey::RSA.new(data)
p12 = OpenSSL::PKCS12.create(password, "Imported Certificate", pkey, cert)

if options[:out]
  File.open(options[:out], "w") { |f| f.syswrite(p12.to_der) }
else
  puts p12.to_der
end
