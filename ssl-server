#!/usr/bin/env ruby
# Copyright (c) 2011 The University of Manchester, UK.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the names of The University of Manchester nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Robert Haines

require 'socket'
require 'openssl'
require 'optparse'

DEFAULT_PORT = 6666
MESSAGE = "Hello, Ruby SSL World!".freeze

options = { port: DEFAULT_PORT, message: MESSAGE }
opts = OptionParser.new do |opt|
  opt.banner = "Usage: ssl-server [options]"
  opt.separator "  A basic secure sockets server where [options] can be:"
  opt.on("-p PORT", "--port=PORT", "The port number to listen on. Should be " \
    "at least 1024 if not started as root. Default #{DEFAULT_PORT}.") do |val|
    options[:port] = val.chomp.to_i
  end
  opt.on("-c CERT:PASS", "--cert=CERT:PASS", "certificate") do |val|
    options[:cert], options[:pass] = val.chomp.split(":", 2)
  end
  opt.on("-k KEY:PASS", "--key=KEY:PASS", "Private Key") do |val|
    options[:key], options[:pass] = val.chomp.split(":", 2)
  end
  opt.on("-m MESSAGE", "--message=MESSAGE", "The message for clients who " \
    "successfully connect to this server. Default '#{MESSAGE}'.") do |val|
    options[:message] = val.chomp
  end
  opt.on_tail("-h", "-?", "--help", "Show this help message.") do
    puts opts
    exit
  end
  opt.on_tail("-v", "--version", "Show the version.") do
    puts "2.0"
    exit
  end
end

opts.parse!

pem = File.read(options[:cert])
cert = OpenSSL::X509::Certificate.new(pem)
if options[:key]
  key = File.read(options[:key])
  pkey = OpenSSL::PKey::RSA.new(key, options[:pass])
else
  pkey = OpenSSL::PKey::RSA.new(pem, options[:pass])
end

context = OpenSSL::SSL::SSLContext.new
context.cert = cert
context.key = pkey

tcp = TCPServer.new(options[:port])
server = OpenSSL::SSL::SSLServer.new(tcp, context)
puts "Listening for connections... (^c to stop)"
loop do
  Thread.start(server.accept) do |client|
    print "  Got connection..."
    client.puts "*** Message follows ***"
    client.puts options[:message]
    client.puts "***  Message ends   ***"
    client.close
    puts " closed"
  end
end
