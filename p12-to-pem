#!/usr/bin/env ruby
# Copyright (c) 2011 The University of Manchester, UK.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the names of The University of Manchester nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Robert Haines

require 'rubygems'
require 'openssl'
require 'optparse'
require 'io/console'

options = {:cipher => "des3"}
opts = OptionParser.new do |opt|
  opt.banner = "Usage: p12-to-pem [options] p12-file"
  opt.separator "  Convert the supplied p12 file into pem format where " \
    "[options] can be:"
  opt.on("-p PASSWORD", "--password=PASSWORD", "The import password for the " \
    "p12 file. If not specified it will be asked for.") do |val|
    options[:password] = val.chomp
  end
  opt.on("-R", "--reuse-password", "Use the same password for pem export as " \
    "was used for the p12 import.") do
    options[:reuse] = true
  end
  opt.on("-c CIPHER", "--cipher=CIPHER", "Set the cipher to be used for " \
    "encrypting the output. Use 'none' for no encryption. Default " \
    "'#{options[:cipher]}'.") do |val|
    options[:cipher] = val.chomp
  end
  opt.on("-l", "--list-ciphers", "List available ciphers for output.") do
    list = OpenSSL::Cipher.ciphers
    puts list[(list.length / 2)..-1]
    exit
  end
  opt.on_tail("-h", "-?", "--help", "Show this help message.") do
    puts opts
    exit
  end
  opt.on_tail("-v", "--version", "Show the version.") do
    puts "2.0"
    exit
  end
end

opts.parse!

infile = ARGV.shift
if infile.nil?
  $stderr.puts opts
  exit(1)
else
  data = File.read(infile.chomp)
end

password = options[:password]
begin
  p12 = OpenSSL::PKCS12.new(data, password)
rescue
  password = $stdin.getpass("Enter Import Password:")
  retry
end

password = nil unless options[:reuse]

cert = OpenSSL::X509::Certificate.new(p12.certificate)
key = OpenSSL::PKey::RSA.new(p12.key)

if options[:cipher] == "none"
  cipher = nil
  password = nil
else
  cipher = OpenSSL::Cipher.new(options[:cipher])
end

puts cert
puts key.to_pem(cipher, password)
