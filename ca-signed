#!/usr/bin/env ruby
# Copyright (c) 2011 The University of Manchester, UK.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the names of The University of Manchester nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Robert Haines

require 'uri'
require 'net/https'
require 'optparse'

opts = OptionParser.new do |opt|
  opt.banner = "Usage: ca-signed [options] URI"
  opt.separator "  Where URI is a https URI and [options] can be:"
  opt.on_tail("-h", "-?", "--help", "Show this help message.") do
    puts opt
    exit
  end
  opt.on_tail("-v", "--version", "Show the version.") do
    puts "1.0"
    exit
  end
end

opts.parse!

begin
  uri = URI.parse(ARGV[0])
rescue
  puts opts
  exit(1)
end

unless uri.scheme == "https"
  puts "Please use a https address"
  puts opts
  exit(1)
end

http = Net::HTTP.new(uri.host, uri.port)
http.use_ssl = true
http.ca_path = '/etc/ssl/certs'
http.verify_mode = OpenSSL::SSL::VERIFY_PEER
http.verify_depth = 5

request = Net::HTTP::Get.new(uri.path)
response = http.request(request)

puts "Status: #{response.code}\n  Body: #{response.body[0..200]}..."
